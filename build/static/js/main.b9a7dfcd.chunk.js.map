{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","RESULT","options","Game","onFinish","initialOptions","nToUse","useState","setOptions","nSum","currentSum","setCurrentSum","className","map","num","onClick","newSum","hasSolution","filter","option","console","log","arr","n","array","shuffled","i","length","j","Math","floor","random","temp","slice","randomlySelectN","reduce","x","y","sum","App","score","setScore","prize","ceil","setNToUse","state","setState","result","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,gHC6CrCC,G,YACI,UADJA,EAEK,UAGLC,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAiC/BC,EAAO,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,OAAa,EACvBC,mBAASF,GADc,mBAC9CH,EAD8C,KACrCM,EADqC,OAEjBD,mBAASE,EAAKJ,EAAgBC,IAFb,mBAE9CI,EAF8C,KAElCC,EAFkC,KAGrD,OACE,6CACSD,EACP,4BAAQE,UAAU,aACfV,EAAQW,KAAI,SAAAC,GAAG,OACd,4BACEF,UAAU,MACVG,QAAS,WACP,IAAMC,EAASN,EAAaI,EACvBG,EAAYf,EAASc,GAKJ,IAAXA,GACTZ,EAASH,GACTO,EAAWH,GACXM,EAAcF,EAAKJ,EAAgBC,MAEnCK,EAAcK,GACdR,EAAWN,EAAQgB,QAAO,SAAAC,GAAM,OAAIA,IAAWL,QAV/CM,QAAQC,IAAR,uBAA4BnB,EAA5B,cAAyCc,EAAzC,MACAZ,EAASH,GACTO,EAAWH,GACXM,EAAcF,EAAKJ,EAAgBC,OAWtCQ,SAQPL,EAAO,SAACa,EAAKC,GAAN,OAEb,SAAyBC,EAAOD,GAE9B,IADA,IAAME,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAASC,GACtBD,EAASC,GAAKD,EAASG,GACvBH,EAASG,GAAKI,EAGhB,OAAOP,EAASQ,MAAM,EAAGV,GAXFW,CAAgBZ,EAAKC,GAAGY,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAczE,IAAMpB,EAAc,SAAdA,EAAef,EAASoC,GAC5B,OAAY,IAARA,KACAA,EAAM,GAAwB,IAAnBpC,EAAQyB,YACnBW,EAAM,KAGRrB,EAAYf,EAAQ+B,MAAM,GAAIK,EAAMpC,EAAQ,KAC5Ce,EAAYf,EAAQ+B,MAAM,GAAIK,MA4EnBC,MApKH,WAAO,IAAD,EACUhC,mBAAS,GADnB,mBACTiC,EADS,KACFC,EADE,OAEUlC,mBAAS,GAFnB,mBAETmC,EAFS,aAGYnC,mBAC1BsB,KAAKc,KAAKd,KAAKE,SAAW7B,EAAQyB,UAJpB,mBAGTrB,EAHS,KAGDsC,EAHC,OAMUrC,qBANV,mBAMTsC,EANS,KAMFC,EANE,KAQhB,OACE,oCACE,wCAAcN,GACd,oCAAUlC,EAAV,KACCuC,IAAU5C,EACT,wCACE4C,IAAU5C,EACZ,yCAEA,kBAAC,EAAD,CACEK,OAAQA,EACRD,eAAgBH,EAChBE,SAAU,SAAA2C,GACRD,EAASC,GACTC,YAAW,kBAAMF,MAAY,KAC7B1B,QAAQC,IAAI0B,GACZN,EAASM,IAAW9C,EAAiBuC,EAAQE,EAAQF,EAAQE,GAC7DE,EAAUf,KAAKc,KAAKd,KAAKE,SAAW7B,EAAQyB,cChEpCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b9a7dfcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// function App() {\n//   const {\n//     reset,\n//     onNumSelected,\n//     success,\n//     failed,\n//     sum,\n//     prize,\n//     money,\n//     selected\n//   } = useNumSelected();\n//   useEffect(() => {\n//     reset();\n//   }, []);\n\n//   return (\n//     <div className=\"App\">\n//       {success ? (\n//         <Success />\n//       ) : failed ? (\n//         <Failure />\n//       ) : (\n//         <span style={{ display: \"flex\" }}>\n//           <span className=\"stats\">\n//             <div>Sum = {sum}</div>\n//             <div>Prize= ${prize}</div>\n//             <div>Money = ${money}</div>\n//           </span>\n//           <Game\n//             selected={selected}\n//             onNumSelected={onNumSelected}\n//             prize={prize}\n//             money={money}\n//             sum={sum}\n//           />\n//         </span>\n//       )}\n//     </div>\n//   );\n// }\n\nconst RESULT = {\n  FAILED: 'FAILED',\n  SUCCESS: 'SUCCESS'\n};\n\nconst options = [1, 3, 5, 7, 11, 13, 16];\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [prize, setPrize] = useState(5);\n  const [nToUse, setNToUse] = useState(\n    Math.ceil(Math.random() * options.length)\n  );\n  const [state, setState] = useState();\n\n  return (\n    <>\n      <div>score = {score}</div>\n      <div>n = {nToUse} </div>\n      {state === RESULT.FAILED ? (\n        <span>FAILED</span>\n      ) : state === RESULT.SUCCESS ? (\n        <span>SUCCESS</span>\n      ) : (\n        <Game\n          nToUse={nToUse}\n          initialOptions={options}\n          onFinish={result => {\n            setState(result);\n            setTimeout(() => setState(), 1000);\n            console.log(result);\n            setScore(result === RESULT.SUCCESS ? score + prize : score - prize);\n            setNToUse(Math.ceil(Math.random() * options.length));\n          }}\n        />\n      )}\n    </>\n  );\n};\nconst Game = ({ onFinish, initialOptions, nToUse }) => {\n  const [options, setOptions] = useState(initialOptions);\n  const [currentSum, setCurrentSum] = useState(nSum(initialOptions, nToUse));\n  return (\n    <>\n      sum = {currentSum}\n      <header className=\"container\">\n        {options.map(num => (\n          <button\n            className=\"num\"\n            onClick={() => {\n              const newSum = currentSum - num;\n              if (!hasSolution(options, newSum)) {\n                console.log(`hasSolution([${options}], ${newSum})`);\n                onFinish(RESULT.FAILED);\n                setOptions(initialOptions);\n                setCurrentSum(nSum(initialOptions, nToUse));\n              } else if (newSum === 0) {\n                onFinish(RESULT.SUCCESS);\n                setOptions(initialOptions);\n                setCurrentSum(nSum(initialOptions, nToUse));\n              } else {\n                setCurrentSum(newSum);\n                setOptions(options.filter(option => option !== num));\n              }\n            }}\n          >\n            {num}\n          </button>\n        ))}\n      </header>\n    </>\n  );\n};\n\nconst nSum = (arr, n) => randomlySelectN(arr, n).reduce((x, y) => x + y, 0);\n\nfunction randomlySelectN(array, n) {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = temp;\n  }\n\n  return shuffled.slice(0, n);\n}\n\nconst hasSolution = (options, sum) => {\n  if (sum === 0) return true;\n  if (sum > 0 && options.length === 0) return false;\n  if (sum < 0) return false;\n\n  return (\n    hasSolution(options.slice(1), sum - options[0]) ||\n    hasSolution(options.slice(1), sum)\n  );\n};\n\n// const useNumSelected = num => {\n//   const [selected, add, remove, setSelected] = useSet([]);\n//   const [sum, setSum] = useState();\n//   const [money, setMoney] = useState(0);\n//   const [prize, setPrize] = useState(0);\n//   const [totalPrize, setTotalPrize] = useState(0);\n//   const [success, setSuccess] = useState(false);\n//   const [failed, setFailed] = useState(false);\n\n//   const reset = () => {\n//     const theSelected = [1, 3, 5, 7, 11, 13, 16];\n//     setSelected(theSelected);\n//     setSum(\n//       new Array(2)\n//         .fill(null)\n//         .map(x => Math.floor(Math.random() * theSelected.length))\n//         .reduce((i, sum) => sum + theSelected[i], 0)\n//     );\n//     setPrize(Math.ceil(Math.random() * 5));\n//     setSuccess(false);\n//     setFailed(false);\n//   };\n\n//   const onNumSelected = num => () => {\n//     const newScore = sum - num;\n//     remove(num);\n//     setSum(newScore);\n//     if (newScore === 0) {\n//       setMoney(money + prize);\n//       setTotalPrize(prize + totalPrize);\n//       setSuccess(true);\n//       setTimeout(() => {\n//         reset();\n//       }, 1000);\n//     } else if (newScore < 0 || cantSum(selected, sum)) {\n//       setMoney(money - prize);\n//       setFailed(true);\n//       setTimeout(() => {\n//         reset();\n//       }, 1000);\n//     }\n//   };\n//   return { onNumSelected, reset, success, failed, sum, prize, money, selected };\n// };\n\n// function useSet(initial = []) {\n//   const [selected, setSelected] = useState(initial);\n//   const theSet = new Set(selected);\n\n//   return [\n//     selected,\n//     x => {\n//       theSet.add(x);\n//       setSelected(Array.from(theSet.values()));\n//     },\n//     x => {\n//       theSet.delete(x);\n//       setSelected(Array.from(theSet.values()));\n//     },\n//     setSelected\n//   ];\n// }\n\nconst Success = () => <div style={{ fontSize: 36 }}> SUCCESS!!! :) :)</div>;\nconst Failure = () => <div style={{ fontSize: 36 }}>Failed!!! :( :( </div>;\n\nfunction cantSum(selected, sum) {\n  return (\n    selected.reduce((x, y) => x + y, 0) < sum || selected.every(x => x > sum)\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}